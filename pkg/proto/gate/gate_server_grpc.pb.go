// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: gate_server.proto

package gate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_BidirectionalStreamingMethod_FullMethodName = "/Service/BidirectionalStreamingMethod"
	Service_ForwardBinaryData_FullMethodName            = "/Service/ForwardBinaryData"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	BidirectionalStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (Service_BidirectionalStreamingMethodClient, error)
	ForwardBinaryData(ctx context.Context, opts ...grpc.CallOption) (Service_ForwardBinaryDataClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) BidirectionalStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (Service_BidirectionalStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_BidirectionalStreamingMethod_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceBidirectionalStreamingMethodClient{stream}
	return x, nil
}

type Service_BidirectionalStreamingMethodClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type serviceBidirectionalStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *serviceBidirectionalStreamingMethodClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceBidirectionalStreamingMethodClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) ForwardBinaryData(ctx context.Context, opts ...grpc.CallOption) (Service_ForwardBinaryDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], Service_ForwardBinaryData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceForwardBinaryDataClient{stream}
	return x, nil
}

type Service_ForwardBinaryDataClient interface {
	Send(*BinaryData) error
	Recv() (*BinaryData, error)
	grpc.ClientStream
}

type serviceForwardBinaryDataClient struct {
	grpc.ClientStream
}

func (x *serviceForwardBinaryDataClient) Send(m *BinaryData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceForwardBinaryDataClient) Recv() (*BinaryData, error) {
	m := new(BinaryData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	BidirectionalStreamingMethod(Service_BidirectionalStreamingMethodServer) error
	ForwardBinaryData(Service_ForwardBinaryDataServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) BidirectionalStreamingMethod(Service_BidirectionalStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingMethod not implemented")
}
func (UnimplementedServiceServer) ForwardBinaryData(Service_ForwardBinaryDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ForwardBinaryData not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_BidirectionalStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).BidirectionalStreamingMethod(&serviceBidirectionalStreamingMethodServer{stream})
}

type Service_BidirectionalStreamingMethodServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceBidirectionalStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *serviceBidirectionalStreamingMethodServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceBidirectionalStreamingMethodServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_ForwardBinaryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).ForwardBinaryData(&serviceForwardBinaryDataServer{stream})
}

type Service_ForwardBinaryDataServer interface {
	Send(*BinaryData) error
	Recv() (*BinaryData, error)
	grpc.ServerStream
}

type serviceForwardBinaryDataServer struct {
	grpc.ServerStream
}

func (x *serviceForwardBinaryDataServer) Send(m *BinaryData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceForwardBinaryDataServer) Recv() (*BinaryData, error) {
	m := new(BinaryData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStreamingMethod",
			Handler:       _Service_BidirectionalStreamingMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ForwardBinaryData",
			Handler:       _Service_ForwardBinaryData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gate_server.proto",
}
